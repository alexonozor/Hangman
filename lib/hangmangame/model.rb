require_relative "display"
require_relative "helper"
# require "pry"



class Model
  include ::Hangman::Helper
  #This word is used to instatiate
  #and also return the secret word from the dictionary
  #generated by the getnerate word method
  def initialize
    @secret = generated_word.downcase
    @chances = 7
    @misses = 0;
    @correct_secrect = ""
    @secret.length.times do |a|
      @correct_secrect << '-'
    end
      @correct_secrect
  end

#this generate the secret word form the dictionary.
  def generated_word
    desk_file = File.open("lib/5desk.txt", "r")
    dictionary = []
    desk_file.each do |entry|
      entry = entry.chomp
      dictionary << entry.to_s if (entry.length >= 5 && entry.length <= 12)
    end
    secret = dictionary.sample.chomp.downcase
    secret
  end

  #This decrement the chances of the user whenever its called
  def remove_chance
    @chances -= 1
  end

 # this returen trye if the guessed letter by the user
 #is in the secret word
  def secret_match?(input)
    @guessed = input
    if @secret.include?(input) 
      return true
    end
      return false
  end

#the below method save the game by writing it into the a file
#it accepts four a args chances, misses, and the correct word
  def save_game(text)
    Dir.mkdir("saves") unless Dir.exists?("saves")
    game_name = get_input(text).downcase
    save_file = "lib/saves/games.txt"
    begin
      file = File.open(save_file, "w")
      file.write("#{game_name} #{@secret} #{@chances} #{@misses} #{@correct_secrect} #{@guessed}")
    rescue IOError => e
      #some error occur, dir not writable etc.
    ensure
      file.close unless file.nil?
    end
    Game.new.start_menu
  end
  
  
  
  def game_complete
    return true if @chances == 0 
    if @correct_secret
      return true unless @correct_secret.include? '-'
    end
  end

# this method is use to load the recent save game
  def load_game
    save_file = "lib/saves/games.txt"
    load_file = File.open(save_file, "r")
    game_data = []
    load_file.each do |data|
      game_data << data
    end
    game_data = game_data[0].split(' ')
    @secret = game_data[1]
    @chances = game_data[2].to_i
    @misses = game_data[3].to_i
    @correct_secrect = ""
    @correct_secrect = game_data[4].chomp
    @guessed = game_data[5]
  end 

# method replace the correct word in the view fromm e.g [---s-a]
  def reveal_matches(input)
    hit = []
    i = 0
    @secret.split.each do |p|
      hit << i if p == input
      i +=1
    end
    hit.each do |i|
      @correct_secrect[i] = input
    end
    return @correct_secrect
  end

 #this are all getter methods
  def secret
    @secret
  end

  def chances
    @chances
  end

  def guessed
    @guessed
  end

  def misses
    @misses
  end


  def correct_secrect(select)
    if @secret.include?(select)
      secret_copy = @secret
      secret_index = find_indexs(secret_copy, select)
      secret_copy.delete(select)
      secret_index.each{|n| @correct_secrect[n] = select}
      @correct_secrect
    else
      @correct_secrect
    end
  end



  def find_indexs(array, val)
    ret_array= []
    array.length.times{|v|
        ret_array << v if array[v] == val
    }
    ret_array
  end


end
